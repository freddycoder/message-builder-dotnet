/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using Ca.Infoway.Messagebuilder;
	using ILOG.J2CsMapping.Text;
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	public class DateUtil {
	
		private sealed class Anonymous_C0 : ThreadLocal<IDictionary<String, DateFormat>>
        {
			protected override IDictionary<String, DateFormat> InitialValue()
            {
				return new Dictionary<String, DateFormat>();
			}
	
			public Anonymous_C0() {
			}
		}
	
		private static ThreadLocal<IDictionary<String, DateFormat>> instances = new DateUtil.Anonymous_C0();
	
		public static DateFormat Instance(String pattern) {
			IDictionary<String, DateFormat> map = DateUtil.instances.Get();
			if (!map.ContainsKey(pattern)) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Put(
                    map,
                    (System.String)(pattern),
                    (ILOG.J2CsMapping.Text.DateFormat)(new SimpleDateFormat(pattern, System.Globalization.CultureInfo.CurrentCulture))
                );
			}
			return ((ILOG.J2CsMapping.Text.DateFormat)ILOG.J2CsMapping.Collections.Generics.Collections.Get(map,pattern));
		}
	
		public static PlatformDate GetDate(int year, int zeroBasedMonth, int day) {
//~			return new GregorianCalendar(year, zeroBasedMonth, day).GetTime();
            return new PlatformDate(new DateTime(year, 1 + zeroBasedMonth, day));
		}
	
		public static PlatformDate GetDate(int year, int zeroBasedMonth, int day, int hour, int minute, int second, int subsecond) {
//~			return new GregorianCalendar(year, zeroBasedMonth, day).GetTime();			
            return new PlatformDate(new DateTime(year, 1 + zeroBasedMonth, day, hour, minute, second, subsecond));
		}

        public static PlatformDate GetDate(int year, int zeroBasedMonth, int day, int hour, int minute, int second, int subsecond, TimeZoneInfo timeZone)
        {
            DateTime originalDate = new DateTime(year, 1 + zeroBasedMonth, day, hour, minute, second, subsecond);
            DateTime convertedDate = TimeZoneInfo.ConvertTime(originalDate, timeZone);

            return new PlatformDate(convertedDate);
        }
	
		public static PlatformDate GetEndOf(PlatformDate date) {
			PlatformDate result = null;
			if (date != null) {
				String yyyymmdd = Instance("yyyy-M-d").Format(date);
				try {
					result = new PlatformDate(Instance("yyyy-M-d-HH:mm:ss.SSS").Parse(yyyymmdd + "-23:59:59.999"));
				} catch (ParseException)
                {
				}
			}
			return result;
		}
	
		public static PlatformDate GetStartOf(PlatformDate date) {
			PlatformDate result = null;
			if (date != null) {
				String yyyymmdd = Instance("yyyy-M-d").Format(date);
				try {
					result = new PlatformDate(Instance("yyyy-M-d-HH:mm:ss.SSS").Parse(yyyymmdd + "-00:00:00.000"));
				} catch (ParseException)
                {
				}
			}
			return result;
		}
	
	}
}
