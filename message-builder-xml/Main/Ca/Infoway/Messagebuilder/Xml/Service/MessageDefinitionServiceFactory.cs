/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Xml.Service {
	
	using Ca.Infoway.Messagebuilder.Service;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// The message defintion service factory provides a list of all message definitions
	/// that are available from the classpath.
	/// </summary>
	///
	public class MessageDefinitionServiceFactory : ServiceFactory<MessageDefinitionService> {
	
		private static readonly object locker = new object ();
		
		private static MessageDefinitionService instance;
	
		/// <summary>
		/// Standard constructor.
		/// </summary>
		///
		public MessageDefinitionServiceFactory() : base(typeof(MessageDefinitionService)) {
		}
	
		protected override MessageDefinitionService ChooseImplementationOfService(
				IList<MessageDefinitionService> services) {
			return new CompositeMessageDefinitionService(services);
		}
	
		protected override MessageDefinitionService CreateTrivialService() {
			return new TrivialService();
		}
	
		/// <summary>
		/// Create an instance of the message definition service.
		/// </summary>
		///
		/// <returns>the message definition service</returns>
		//[MethodImpl(MethodImplOptions.Synchronized)]
		public override MessageDefinitionService Create() {
			lock (locker) 
			{
				if (instance == null) {
					instance = base.Create();
				}
				return instance;
			}
		}
		
		protected override IList<MessageDefinitionService> GetServices(IList<Uri> resources) {
			IList<MessageDefinitionService> result = base.GetServices(resources);
			result.Add(new ManifestMessageDefinitionService());
			return result;
		}
		
	}
}
